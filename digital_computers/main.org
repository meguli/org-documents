#+TITLE:     Programming the Digital Computer
#+AUTHOR:    Burak Kaan \Ccedil opur
#+EMAIL:     burakcopur@gmail.com

#+LANGUAGE:  en
#+INFOJS_OPT: view:info toc:t ltoc:nil button:t mouse:underline path:../org-info.js
#+LINK_HOME: http://ehneilsen.net
#+LINK_UP: http://ehneilsen.net/notebook
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../orgcss/org.css" />
#+LaTeX_CLASS: smarticle
#+LaTeX_HEADER: \pdfmapfile{/home/neilsen/texmf/fonts/map/dvips/libertine/libertine.map}
#+LaTeX_HEADER: \usepackage[ttscale=.875]{libertine}
#+LaTeX_HEADER: \usepackage{sectsty}
#+LaTeX_HEADER: \sectionfont{\normalfont\scshape}
#+LaTeX_HEADER: \subsectionfont{\normalfont\itshape}

* Getting to Know the Computer

Here, we give the first introduction to how a modern computer works. Throughout,
we will mostly talk about Intel 64 because this is the most prevalent architecture
around. We assume some familiarity with C programming.



** Introduction
 
What do we mean by programming? You might say it is about coding up algorithms
to solve problems. Then, what is an algorithm? Informally, an algorithm is a
series of commands, a recipe that explains how to do something. 

*** TODO Explain Euclid's Algorithm for GCD

In fact, programming and cooking are rather similar. First, just like recipes,
we want our algorithms to be *finite*. Who would like to cook endlessly without
eating any of that juicy meal, right? An infinite chain of commands would not
accumulate into a meaningful result. 

** A First Look at the Computer Through Intel64 Assembly

Talkk about basics of assembly programming.
